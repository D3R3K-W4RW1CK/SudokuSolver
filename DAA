#include <iostream>
using namespace std;

// Size of the Sudoku grid
const int N = 9;

// Function to print the final solved Sudoku grid
void printGrid(int grid[N][N]) {
    for (int row = 0; row < N; row++) {
        for (int col = 0; col < N; col++) {
            cout << grid[row][col] << " ";
        }
        cout << endl;
    }
}

// Function to check if it is safe to place a number at the given position
bool isSafe(int grid[N][N], int row, int col, int num) {
    // Check if num is already present in the current row
    for (int i = 0; i < N; i++) {
        if (grid[row][i] == num) {
            return false;
        }
    }
    // Check if num is already present in the current column
    for (int i = 0; i < N; i++) {
        if (grid[i][col] == num) {
            return false;
        }
    }
    // Check if num is already present in the current 3x3 box
    int startRow = row - row % 3;
    int startCol = col - col % 3;
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (grid[i + startRow][j + startCol] == num) {
                return false;
            }
        }
    }
    return true; // If none of the above conditions are violated
}

// Function to solve the Sudoku puzzle using backtracking
bool solveSudoku(int grid[N][N]) {
    int row, col;
    bool isEmptyCell = false;

    // Find the first empty cell in the grid
    for (row = 0; row < N; row++) {
        for (col = 0; col < N; col++) {
            if (grid[row][col] == 0) {
                isEmptyCell = true;
                break;
            }
        }
        if (isEmptyCell) {
            break;
        }
    }

    // If there is no empty cell, the Sudoku puzzle is solved
    if (!isEmptyCell) {
        return true;
    }

    // Try placing numbers from 1 to 9
    for (int num = 1; num <= 9; num++) {
        // Check if it is safe to place the current number at the current position
        if (isSafe(grid, row, col, num)) {
            // Place the number at the current position
            grid[row][col] = num;

            // Recursively solve the Sudoku puzzle
            if (solveSudoku(grid)) {
                return true;
            }

            // If the number doesn't lead to a solution, backtrack and try the next number
            grid[row][col] = 0;
        }
    }
    return false;
}

int main() {
    int grid[N][N] = {
        {5, 3, 0, 0, 7, 0, 0, 0, 0},
        {6, 0, 0, 1, 9, 5, 0, 0, 0},
        {0, 9, 8, 0, 0, 0, 0, 6, 0},
        {8, 0, 0, 0, 6, 0, 0, 0, 3},
        {4, 0, 0, 8, 0, 3, 0, 0, 1},
        {7, 0, 0, 0, 2, 0, 0, 0, 6},
        {0, 6, 0, 0, 0, 0, 2, 8, 0},
        {0, 0, 0, 4, 1, 9, 0, 0, 5},
        {0, 0, 0, 0, 8, 0, 0, 7, 9}
    };

    // Solve the Sudoku puzzle
    if (solveSudoku(grid)) {
        // Print the solved Sudoku grid
        cout << "Sudoku solved successfully!" << endl;
        cout << "The solution is:" << endl;
        printGrid(grid);
    } else {
        cout << "No solution exists for the given Sudoku grid!" << endl;
    }

    return 0;
}
